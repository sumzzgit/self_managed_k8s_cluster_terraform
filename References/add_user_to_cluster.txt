Ref -> https://kubernetes.io/docs/reference/access-authn-authz/certificate-signing-requests/#create-private-key
https://youtu.be/dnKVZR4eK7Q?si=vAwwL1Hh3iTrO5IT

-> create the private key for the user 
openssl genrsa -out myuser.key 2048

now this key should be signed by the cluster certificate , so create the CSR ( Certificate Signing Request )

-> create the CSR file 
openssl req -new -key myuser.key -out myuser.csr -subj "/CN=myuser"

-> Create a base64 encoded version of the csr file 
cat myuser.csr | base64 | tr -d "\n"

-> Create a CertificateSigningRequest 
cat <<EOF | kubectl apply -f -
apiVersion: certificates.k8s.io/v1
kind: CertificateSigningRequest
metadata:
  name: myuser
spec:
  request: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURSBSRVFVRVNULS0tLS0KTUlJQ1ZqQ0NBVDRDQVFBd0VURVBNQTBHQTFVRUF3d0dZVzVuWld4aE1JSUJJakFOQmdrcWhraUc5dzBCQVFFRgpBQU9DQVE4QU1JSUJDZ0tDQVFFQTByczhJTHRHdTYxakx2dHhWTTJSVlRWMDNHWlJTWWw0dWluVWo4RElaWjBOCnR2MUZtRVFSd3VoaUZsOFEzcWl0Qm0wMUFSMkNJVXBGd2ZzSjZ4MXF3ckJzVkhZbGlBNVhwRVpZM3ExcGswSDQKM3Z3aGJlK1o2MVNrVHF5SVBYUUwrTWM5T1Nsbm0xb0R2N0NtSkZNMUlMRVI3QTVGZnZKOEdFRjJ6dHBoaUlFMwpub1dtdHNZb3JuT2wzc2lHQ2ZGZzR4Zmd4eW8ybmlneFNVekl1bXNnVm9PM2ttT0x1RVF6cXpkakJ3TFJXbWlECklmMXBMWnoyalVnald4UkhCM1gyWnVVV1d1T09PZnpXM01LaE8ybHEvZi9DdS8wYk83c0x0MCt3U2ZMSU91TFcKcW90blZtRmxMMytqTy82WDNDKzBERHk5aUtwbXJjVDBnWGZLemE1dHJRSURBUUFCb0FBd0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBR05WdmVIOGR4ZzNvK21VeVRkbmFjVmQ1N24zSkExdnZEU1JWREkyQTZ1eXN3ZFp1L1BVCkkwZXpZWFV0RVNnSk1IRmQycVVNMjNuNVJsSXJ3R0xuUXFISUh5VStWWHhsdnZsRnpNOVpEWllSTmU3QlJvYXgKQVlEdUI5STZXT3FYbkFvczFqRmxNUG5NbFpqdU5kSGxpT1BjTU1oNndLaTZzZFhpVStHYTJ2RUVLY01jSVUyRgpvU2djUWdMYTk0aEpacGk3ZnNMdm1OQUxoT045UHdNMGM1dVJVejV4T0dGMUtCbWRSeEgvbUNOS2JKYjFRQm1HCkkwYitEUEdaTktXTU0xMzhIQXdoV0tkNjVoVHdYOWl4V3ZHMkh4TG1WQzg0L1BHT0tWQW9FNkpsYWFHdTlQVmkKdjlOSjVaZlZrcXdCd0hKbzZXdk9xVlA3SVFjZmg3d0drWm89Ci0tLS0tRU5EIENFUlRJRklDQVRFIFJFUVVFU1QtLS0tLQo=
  signerName: kubernetes.io/kube-apiserver-client
  expirationSeconds: 86400  # one day
  usages:
  - client auth
EOF

here spec.request is the place where you need to copy paste the base64 encoded version of the csr file 
expirationSeconds is the time which the user/certificate will have the access 

-> Get the list of CSRs
kubectl get csr

-> Approve the CSR
kubectl certificate approve myuser

-> Get the certificate 
kubectl get csr/myuser -o yaml

The certificate value is in Base64-encoded format under status.certificate

kubectl get csr myuser -o jsonpath='{.status.certificate}'| base64 -d > myuser.crt

-> create the role with required permissions 
kubectl create role developer --verb=* --resource=*

-> create the role binding for the user created 
kubectl create rolebinding developer-binding-myuser --role=developer --user=myuser

-> Add to kubeconfig 
kubectl config set-credentials myuser --client-key=myuser.key --client-certificate=myuser.crt --embed-certs=true

kubectl config set-context myuser --cluster=kubernetes --user=myuser

kubectl config use-context myuser


Kubernetes Self-managed Cluster with AWS IAM OIDC -> https://medium.com/@channyein/kubernetes-self-managed-cluster-with-aws-iam-oidc-e483d4dc0df2